import { type RequestState } from './authStatus';
import { type VerifyTokenOptions } from './verify';
export type LoadResourcesOptions = {
    loadSession?: boolean;
    loadUser?: boolean;
    loadOrganization?: boolean;
};
export type RequiredVerifyTokenOptions = Required<Pick<VerifyTokenOptions, 'apiKey' | 'secretKey' | 'apiUrl' | 'apiVersion'>>;
export type OptionalVerifyTokenOptions = Partial<Pick<VerifyTokenOptions, 'authorizedParties' | 'clockSkewInSeconds' | 'jwksCacheTtlInMs' | 'skipJwksCache' | 'jwtKey'>>;
export type AuthenticateRequestOptions = RequiredVerifyTokenOptions & OptionalVerifyTokenOptions & LoadResourcesOptions & {
    cookieToken?: string;
    clientUat?: string;
    headerToken?: string;
    origin?: string;
    frontendApi: string;
    publishableKey: string;
    host: string;
    forwardedHost?: string;
    forwardedPort?: string;
    forwardedProto?: string;
    referrer?: string;
    userAgent?: string;
};
export declare function authenticateRequest(options: AuthenticateRequestOptions): Promise<RequestState>;
export declare const debugRequestState: (params: RequestState) => {
    frontendApi: string;
    isSignedIn: boolean;
    isInterstitial: boolean;
    reason: import("./authStatus").AuthReason | null;
    message: string | null;
    publishableKey: string;
};
//# sourceMappingURL=request.d.ts.map