import { type CreateBackendApiOptions } from './api';
import { type CreateAuthenticateRequestOptions } from './tokens';
export * from './api/resources';
export * from './tokens';
export * from './tokens/jwt';
export * from './tokens/verify';
export { constants } from './constants';
export type ClerkOptions = CreateBackendApiOptions & Partial<Pick<CreateAuthenticateRequestOptions['options'], 'jwtKey'>>;
export declare function Clerk(options: ClerkOptions): {
    __unstable_options: {
        apiKey?: string | undefined;
        secretKey?: string | undefined;
        apiUrl?: string | undefined;
        apiVersion?: string | undefined;
        userAgent?: string | undefined;
        httpOptions?: RequestInit | undefined;
        jwtKey?: string | undefined;
    };
    authenticateRequest: ({ apiKey: runtimeApiKey, secretKey: runtimeSecretKey, frontendApi: runtimeFrontendApi, publishableKey: runtimePublishableKey, jwtKey: runtimeJwtKey, ...rest }: Omit<import("./tokens").AuthenticateRequestOptions, "apiUrl" | "apiVersion">) => Promise<import("./tokens").RequestState>;
    localInterstitial: typeof import("./tokens").loadInterstitialFromLocal;
    remotePublicInterstitial: ({ frontendApi: runtimeFrontendApi, publishableKey: runtimePublishableKey, ...rest }: import("./tokens/interstitial").LoadInterstitialOptions) => Promise<string>;
    remotePrivateInterstitial: () => Promise<string>;
    remotePublicInterstitialUrl: typeof import("./tokens/interstitial").buildPublicInterstitialUrl;
    debugRequestState: (params: import("./tokens").RequestState) => {
        frontendApi: string;
        isSignedIn: boolean;
        isInterstitial: boolean;
        reason: import("./tokens/authStatus").AuthReason | null;
        message: string | null;
        publishableKey: string;
    };
    allowlistIdentifiers: import("./api/endpoints").AllowlistIdentifierAPI;
    clients: import("./api/endpoints").ClientAPI;
    emailAddresses: import("./api/endpoints").EmailAddressAPI;
    emails: import("./api/endpoints").EmailAPI;
    interstitial: import("./api/endpoints").InterstitialAPI;
    invitations: import("./api/endpoints").InvitationAPI;
    organizations: import("./api/endpoints").OrganizationAPI;
    phoneNumbers: import("./api/endpoints").PhoneNumberAPI;
    redirectUrls: import("./api/endpoints").RedirectUrlAPI;
    sessions: import("./api/endpoints").SessionAPI;
    signInTokens: import("./api/endpoints").SignInTokenAPI;
    smsMessages: import("./api/endpoints").SMSMessageAPI;
    users: import("./api/endpoints").UserAPI;
};
//# sourceMappingURL=index.d.ts.map