"use strict";
var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __reExport = (target, mod, secondTarget) => (__copyProps(target, mod, "default"), secondTarget && __copyProps(secondTarget, mod, "default"));
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// src/index.ts
var src_exports = {};
__export(src_exports, {
  Clerk: () => Clerk2,
  ClerkExpressRequireAuth: () => ClerkExpressRequireAuth,
  ClerkExpressWithAuth: () => ClerkExpressWithAuth,
  allowlistIdentifiers: () => allowlistIdentifiers,
  clerkClient: () => clerkClient,
  clients: () => clients,
  createClerkClient: () => createClerkClient,
  createClerkExpressRequireAuth: () => createClerkExpressRequireAuth,
  createClerkExpressWithAuth: () => createClerkExpressWithAuth,
  default: () => src_default,
  emailAddresses: () => emailAddresses,
  emails: () => emails,
  invitations: () => invitations,
  organizations: () => organizations,
  phoneNumbers: () => phoneNumbers,
  requireAuth: () => requireAuth,
  sessions: () => sessions,
  setClerkApiKey: () => setClerkApiKey,
  setClerkApiVersion: () => setClerkApiVersion,
  setClerkHttpOptions: () => setClerkHttpOptions,
  setClerkServerApiUrl: () => setClerkServerApiUrl,
  smsMessages: () => smsMessages,
  users: () => users,
  withAuth: () => withAuth
});
module.exports = __toCommonJS(src_exports);

// src/clerkClient.ts
var import_backend2 = require("@clerk/backend");

// src/authenticateRequest.ts
var import_backend = require("@clerk/backend");
var import_cookie = __toESM(require("cookie"));
var parseCookies = (req) => {
  return import_cookie.default.parse(req.headers["cookie"] || "");
};
var authenticateRequest = (clerkClient2, apiKey, secretKey, frontendApi, publishableKey, req, options) => {
  const cookies = parseCookies(req);
  const { jwtKey, authorizedParties } = options || {};
  return clerkClient2.authenticateRequest({
    apiKey,
    secretKey,
    frontendApi,
    publishableKey,
    jwtKey,
    authorizedParties,
    cookieToken: cookies[import_backend.constants.Cookies.Session] || "",
    headerToken: req.headers[import_backend.constants.Headers.Authorization]?.replace("Bearer ", "") || "",
    clientUat: cookies[import_backend.constants.Cookies.ClientUat] || "",
    host: req.headers.host,
    forwardedPort: req.headers[import_backend.constants.Headers.ForwardedPort],
    forwardedHost: req.headers[import_backend.constants.Headers.ForwardedHost],
    referrer: req.headers.referer,
    userAgent: req.headers["user-agent"]
  });
};
var handleInterstitialCase = (res, requestState, interstitial) => {
  if (requestState.isInterstitial || requestState.isUnknown) {
    res.writeHead(401, { "Content-Type": "text/html" });
    res.end(interstitial);
  }
};
var decorateResponseWithObservabilityHeaders = (res, requestState) => {
  requestState.message && res.setHeader(import_backend.constants.Headers.AuthMessage, requestState.message);
  requestState.reason && res.setHeader(import_backend.constants.Headers.AuthReason, requestState.reason);
  requestState.status && res.setHeader(import_backend.constants.Headers.AuthStatus, requestState.status);
};

// src/clerkExpressRequireAuth.ts
var createClerkExpressRequireAuth = (createOpts) => {
  const { clerkClient: clerkClient2, frontendApi = "", apiKey = "", secretKey = "", publishableKey = "" } = createOpts;
  return (options = {}) => {
    return async (req, res, next) => {
      const requestState = await authenticateRequest(
        clerkClient2,
        apiKey,
        secretKey,
        frontendApi,
        publishableKey,
        req,
        options
      );
      decorateResponseWithObservabilityHeaders(res, requestState);
      if (requestState.isInterstitial || requestState.isUnknown) {
        const interstitial = await clerkClient2.remotePrivateInterstitial();
        return handleInterstitialCase(res, requestState, interstitial);
      }
      if (requestState.isSignedIn) {
        req.auth = { ...requestState.toAuth(), claims: requestState.toAuth().sessionClaims };
        next();
        return;
      }
      next(new Error("Unauthenticated"));
    };
  };
};

// src/clerkExpressWithAuth.ts
var createClerkExpressWithAuth = (createOpts) => {
  const { clerkClient: clerkClient2, frontendApi = "", apiKey = "", secretKey = "", publishableKey = "" } = createOpts;
  return (options = {}) => {
    return async (req, res, next) => {
      const requestState = await authenticateRequest(
        clerkClient2,
        apiKey,
        secretKey,
        frontendApi,
        publishableKey,
        req,
        options
      );
      decorateResponseWithObservabilityHeaders(res, requestState);
      if (requestState.isInterstitial || requestState.isUnknown) {
        const interstitial = await clerkClient2.remotePrivateInterstitial();
        return handleInterstitialCase(res, requestState, interstitial);
      }
      req.auth = {
        ...requestState.toAuth(),
        claims: requestState.toAuth().sessionClaims
      };
      next();
    };
  };
};

// src/clerkClient.ts
var API_URL = process.env.CLERK_API_URL || "https://api.clerk.dev";
var API_VERSION = process.env.CLERK_API_VERSION || "v1";
var API_KEY = process.env.CLERK_SECRET_KEY || process.env.CLERK_API_KEY || "";
var PUBLISHABLE_KEY = process.env.CLERK_PUBLISHABLE_KEY || "";
function Clerk2(options) {
  const clerkClient2 = (0, import_backend2.Clerk)(options);
  const expressWithAuth = createClerkExpressWithAuth({ ...options, clerkClient: clerkClient2 });
  const expressRequireAuth = createClerkExpressRequireAuth({ ...options, clerkClient: clerkClient2 });
  const verifyToken = (token, verifyOpts) => {
    const issuer = (iss) => iss.startsWith("https://clerk.") || iss.includes(".clerk.accounts");
    return (0, import_backend2.verifyToken)(token, { issuer, ...options, ...verifyOpts });
  };
  return {
    ...clerkClient2,
    expressWithAuth,
    expressRequireAuth,
    verifyToken,
    ...createBasePropForRedwoodCompatibility()
  };
}
var createBasePropForRedwoodCompatibility = () => {
  const verifySessionToken = (token) => {
    const { payload } = (0, import_backend2.decodeJwt)(token);
    return (0, import_backend2.verifyToken)(token, {
      issuer: payload.iss,
      jwtKey: process.env.CLERK_JWT_KEY
    });
  };
  return { base: { verifySessionToken } };
};
var createClerkClient = Clerk2;
var clerkClient = Clerk2({
  apiKey: API_KEY,
  apiUrl: API_URL,
  apiVersion: API_VERSION,
  userAgent: "@clerk/clerk-sdk-node"
});
var ClerkExpressRequireAuth = createClerkExpressRequireAuth({
  clerkClient,
  apiUrl: API_URL,
  apiKey: API_KEY,
  secretKey: API_KEY
});
var ClerkExpressWithAuth = createClerkExpressWithAuth({
  clerkClient,
  apiUrl: API_URL,
  apiKey: API_KEY,
  secretKey: API_KEY
});
var setClerkApiKey = (value) => {
  clerkClient.__unstable_options.apiKey = value;
};
var setClerkServerApiUrl = (value) => {
  clerkClient.__unstable_options.apiUrl = value;
};
var setClerkApiVersion = (value) => {
  clerkClient.__unstable_options.apiVersion = value;
};
var setClerkHttpOptions = (value) => {
  clerkClient.__unstable_options.httpOptions = value;
};

// src/index.ts
__reExport(src_exports, require("@clerk/backend"), module.exports);

// src/utils.ts
function runMiddleware(req, res, fn) {
  return new Promise((resolve, reject) => {
    void fn(req, res, (result) => {
      if (result instanceof Error) {
        return reject(result);
      }
      return resolve(result);
    });
  });
}

// src/withAuth.ts
function withAuth(handler, options) {
  return async (req, res) => {
    await runMiddleware(
      req,
      res,
      createClerkExpressWithAuth({
        clerkClient,
        apiUrl: API_URL,
        publishableKey: PUBLISHABLE_KEY
      })(options)
    );
    return handler(req, res);
  };
}

// src/requireAuth.ts
function requireAuth(handler, options) {
  return async (req, res) => {
    await runMiddleware(
      req,
      res,
      createClerkExpressRequireAuth({
        clerkClient,
        apiUrl: API_URL,
        publishableKey: PUBLISHABLE_KEY
      })(options)
    );
    return handler(req, res);
  };
}

// src/index.ts
var {
  users,
  smsMessages,
  sessions,
  emailAddresses,
  phoneNumbers,
  emails,
  invitations,
  organizations,
  clients,
  allowlistIdentifiers
} = clerkClient;
var src_default = clerkClient;
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  Clerk,
  ClerkExpressRequireAuth,
  ClerkExpressWithAuth,
  allowlistIdentifiers,
  clerkClient,
  clients,
  createClerkClient,
  createClerkExpressRequireAuth,
  createClerkExpressWithAuth,
  emailAddresses,
  emails,
  invitations,
  organizations,
  phoneNumbers,
  requireAuth,
  sessions,
  setClerkApiKey,
  setClerkApiVersion,
  setClerkHttpOptions,
  setClerkServerApiUrl,
  smsMessages,
  users,
  withAuth
});
//# sourceMappingURL=index.js.map