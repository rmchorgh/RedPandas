import {
  API_URL,
  Clerk,
  ClerkExpressRequireAuth,
  ClerkExpressWithAuth,
  PUBLISHABLE_KEY,
  clerkClient,
  createClerkClient,
  createClerkExpressRequireAuth,
  createClerkExpressWithAuth,
  setClerkApiKey,
  setClerkApiVersion,
  setClerkHttpOptions,
  setClerkServerApiUrl
} from "./chunk-SDPZHQJL.mjs";

// src/index.ts
export * from "@clerk/backend";

// src/utils.ts
function runMiddleware(req, res, fn) {
  return new Promise((resolve, reject) => {
    void fn(req, res, (result) => {
      if (result instanceof Error) {
        return reject(result);
      }
      return resolve(result);
    });
  });
}

// src/withAuth.ts
function withAuth(handler, options) {
  return async (req, res) => {
    await runMiddleware(
      req,
      res,
      createClerkExpressWithAuth({
        clerkClient,
        apiUrl: API_URL,
        publishableKey: PUBLISHABLE_KEY
      })(options)
    );
    return handler(req, res);
  };
}

// src/requireAuth.ts
function requireAuth(handler, options) {
  return async (req, res) => {
    await runMiddleware(
      req,
      res,
      createClerkExpressRequireAuth({
        clerkClient,
        apiUrl: API_URL,
        publishableKey: PUBLISHABLE_KEY
      })(options)
    );
    return handler(req, res);
  };
}

// src/index.ts
var {
  users,
  smsMessages,
  sessions,
  emailAddresses,
  phoneNumbers,
  emails,
  invitations,
  organizations,
  clients,
  allowlistIdentifiers
} = clerkClient;
var src_default = clerkClient;
export {
  Clerk,
  ClerkExpressRequireAuth,
  ClerkExpressWithAuth,
  allowlistIdentifiers,
  clerkClient,
  clients,
  createClerkClient,
  createClerkExpressRequireAuth,
  createClerkExpressWithAuth,
  src_default as default,
  emailAddresses,
  emails,
  invitations,
  organizations,
  phoneNumbers,
  requireAuth,
  sessions,
  setClerkApiKey,
  setClerkApiVersion,
  setClerkHttpOptions,
  setClerkServerApiUrl,
  smsMessages,
  users,
  withAuth
};
//# sourceMappingURL=index.mjs.map