// src/authenticateRequest.ts
import { constants } from "@clerk/backend";
import cookie from "cookie";
var parseCookies = (req) => {
  return cookie.parse(req.headers["cookie"] || "");
};
var authenticateRequest = (clerkClient2, apiKey, secretKey, frontendApi, publishableKey, req, options) => {
  const cookies = parseCookies(req);
  const { jwtKey, authorizedParties } = options || {};
  return clerkClient2.authenticateRequest({
    apiKey,
    secretKey,
    frontendApi,
    publishableKey,
    jwtKey,
    authorizedParties,
    cookieToken: cookies[constants.Cookies.Session] || "",
    headerToken: req.headers[constants.Headers.Authorization]?.replace("Bearer ", "") || "",
    clientUat: cookies[constants.Cookies.ClientUat] || "",
    host: req.headers.host,
    forwardedPort: req.headers[constants.Headers.ForwardedPort],
    forwardedHost: req.headers[constants.Headers.ForwardedHost],
    referrer: req.headers.referer,
    userAgent: req.headers["user-agent"]
  });
};
var handleInterstitialCase = (res, requestState, interstitial) => {
  if (requestState.isInterstitial || requestState.isUnknown) {
    res.writeHead(401, { "Content-Type": "text/html" });
    res.end(interstitial);
  }
};
var decorateResponseWithObservabilityHeaders = (res, requestState) => {
  requestState.message && res.setHeader(constants.Headers.AuthMessage, requestState.message);
  requestState.reason && res.setHeader(constants.Headers.AuthReason, requestState.reason);
  requestState.status && res.setHeader(constants.Headers.AuthStatus, requestState.status);
};

// src/clerkExpressRequireAuth.ts
var createClerkExpressRequireAuth = (createOpts) => {
  const { clerkClient: clerkClient2, frontendApi = "", apiKey = "", secretKey = "", publishableKey = "" } = createOpts;
  return (options = {}) => {
    return async (req, res, next) => {
      const requestState = await authenticateRequest(
        clerkClient2,
        apiKey,
        secretKey,
        frontendApi,
        publishableKey,
        req,
        options
      );
      decorateResponseWithObservabilityHeaders(res, requestState);
      if (requestState.isInterstitial || requestState.isUnknown) {
        const interstitial = await clerkClient2.remotePrivateInterstitial();
        return handleInterstitialCase(res, requestState, interstitial);
      }
      if (requestState.isSignedIn) {
        req.auth = { ...requestState.toAuth(), claims: requestState.toAuth().sessionClaims };
        next();
        return;
      }
      next(new Error("Unauthenticated"));
    };
  };
};

// src/clerkExpressWithAuth.ts
var createClerkExpressWithAuth = (createOpts) => {
  const { clerkClient: clerkClient2, frontendApi = "", apiKey = "", secretKey = "", publishableKey = "" } = createOpts;
  return (options = {}) => {
    return async (req, res, next) => {
      const requestState = await authenticateRequest(
        clerkClient2,
        apiKey,
        secretKey,
        frontendApi,
        publishableKey,
        req,
        options
      );
      decorateResponseWithObservabilityHeaders(res, requestState);
      if (requestState.isInterstitial || requestState.isUnknown) {
        const interstitial = await clerkClient2.remotePrivateInterstitial();
        return handleInterstitialCase(res, requestState, interstitial);
      }
      req.auth = {
        ...requestState.toAuth(),
        claims: requestState.toAuth().sessionClaims
      };
      next();
    };
  };
};

// src/clerkClient.ts
import {
  Clerk as _Clerk,
  decodeJwt,
  verifyToken as _verifyToken
} from "@clerk/backend";
var API_URL = process.env.CLERK_API_URL || "https://api.clerk.dev";
var API_VERSION = process.env.CLERK_API_VERSION || "v1";
var API_KEY = process.env.CLERK_SECRET_KEY || process.env.CLERK_API_KEY || "";
var PUBLISHABLE_KEY = process.env.CLERK_PUBLISHABLE_KEY || "";
function Clerk2(options) {
  const clerkClient2 = _Clerk(options);
  const expressWithAuth = createClerkExpressWithAuth({ ...options, clerkClient: clerkClient2 });
  const expressRequireAuth = createClerkExpressRequireAuth({ ...options, clerkClient: clerkClient2 });
  const verifyToken = (token, verifyOpts) => {
    const issuer = (iss) => iss.startsWith("https://clerk.") || iss.includes(".clerk.accounts");
    return _verifyToken(token, { issuer, ...options, ...verifyOpts });
  };
  return {
    ...clerkClient2,
    expressWithAuth,
    expressRequireAuth,
    verifyToken,
    ...createBasePropForRedwoodCompatibility()
  };
}
var createBasePropForRedwoodCompatibility = () => {
  const verifySessionToken = (token) => {
    const { payload } = decodeJwt(token);
    return _verifyToken(token, {
      issuer: payload.iss,
      jwtKey: process.env.CLERK_JWT_KEY
    });
  };
  return { base: { verifySessionToken } };
};
var createClerkClient = Clerk2;
var clerkClient = Clerk2({
  apiKey: API_KEY,
  apiUrl: API_URL,
  apiVersion: API_VERSION,
  userAgent: "@clerk/clerk-sdk-node"
});
var ClerkExpressRequireAuth = createClerkExpressRequireAuth({
  clerkClient,
  apiUrl: API_URL,
  apiKey: API_KEY,
  secretKey: API_KEY
});
var ClerkExpressWithAuth = createClerkExpressWithAuth({
  clerkClient,
  apiUrl: API_URL,
  apiKey: API_KEY,
  secretKey: API_KEY
});
var setClerkApiKey = (value) => {
  clerkClient.__unstable_options.apiKey = value;
};
var setClerkServerApiUrl = (value) => {
  clerkClient.__unstable_options.apiUrl = value;
};
var setClerkApiVersion = (value) => {
  clerkClient.__unstable_options.apiVersion = value;
};
var setClerkHttpOptions = (value) => {
  clerkClient.__unstable_options.httpOptions = value;
};

export {
  createClerkExpressRequireAuth,
  createClerkExpressWithAuth,
  API_URL,
  PUBLISHABLE_KEY,
  Clerk2 as Clerk,
  createClerkClient,
  clerkClient,
  ClerkExpressRequireAuth,
  ClerkExpressWithAuth,
  setClerkApiKey,
  setClerkServerApiUrl,
  setClerkApiVersion,
  setClerkHttpOptions
};
//# sourceMappingURL=chunk-SDPZHQJL.mjs.map